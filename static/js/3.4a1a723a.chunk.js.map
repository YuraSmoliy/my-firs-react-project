{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Post","className","classes","item","src","massage","likesCount","maxLength10","maxLengthCreator","MyPosts","memo","posts_elements","posts","map","p","likes_count","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPostsContainer","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","photos","large","Preloader","Profile","ProfileContainer","userId","match","params","autorisedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.4a1a723a.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Wbrx\",\"posts\":\"MyPosts_posts__2UHx2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3boTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3x_mK\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img src=\"\" />\r\n      {props.massage}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst  maxLength10= maxLengthCreator(10)\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let posts_elements = props.posts.map((p) => (\r\n        <Post massage={p.massage} likesCount={p.likes_count}/>\r\n    ));\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>{posts_elements}</div>\r\n        </div>\r\n    );\r\n})\r\n\r\nlet AddNewPostForm = (props)=>{\r\n  return(\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <Field name=\"newPostText\" component={Textarea} validate={[required,maxLength10]} placeholder=\"Post massage\"/>\r\n        </div>\r\n        <div>\r\n          <button>Add post</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nlet AddNewPostFormRedux=reduxForm({form:\"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addPostActionCreator,\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {setStatus} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status,setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = ()=>{\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div >\r\n                        <span onDoubleClick={activateEditMode}>\r\n                            {props.status || \"!!!-----\"}\r\n                        </span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if(!profile){\r\n        return <Preloader></Preloader>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}><img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport classes from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.autorisedUserId;\r\n            if(!userId){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile,getStatus,updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n"],"sourceRoot":""}