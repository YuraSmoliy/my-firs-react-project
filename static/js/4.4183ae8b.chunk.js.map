{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Massage/Massage.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","classes","dialogs_item","active","id","name","Massage","massage","maxLengthCreator50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogs","map","d","massagesElements","massages","m","values","sendMessage","newMessageBody","compose","dispatch","addSendMessageCreator"],"mappings":"yHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,qJCG/MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAEVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,0FCH9DM,EARI,SAACJ,GAClB,OACE,qBAAKK,UAAWC,IAAQC,aAAe,IAAMD,IAAQE,OAArD,SACE,cAAC,IAAD,CAASP,GAAI,YAAcD,EAAMS,GAAjC,SAAsCT,EAAMU,UCAnCC,EAJC,SAACX,GACf,OAAO,qBAAKK,UAAWC,IAAQM,QAAxB,SAAkCZ,EAAMY,W,yCC8B3CC,EAAqBC,YAAiB,IAiBtCC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAhBL,SAAChB,GACtB,OACI,sBAAMkB,SAAUlB,EAAMmB,aAAtB,SACE,gCACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAM,iBAAkBa,YAAY,qBAChEC,SAAU,CAACC,IAAUZ,OAGvB,8BACE,oDAOGa,EA1CC,SAAC1B,GACf,IAAI2B,EAAc3B,EAAM2B,YACpBC,EAAUD,EAAYC,QAAQC,KAAI,SAACC,GAAD,OACpC,cAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMD,GAAIqB,EAAErB,QAE9BsB,EAAmBJ,EAAYK,SAASH,KAAI,SAACI,GAAD,OAC9C,cAAC,EAAD,CAASrB,QAASqB,EAAErB,aAMtB,OAAIZ,EAAMN,OAGR,sBAAKW,UAAWC,IAAQsB,QAAxB,UACE,qBAAKvB,UAAWC,IAAQC,aAAxB,SAAuCqB,IACvC,qBAAKvB,UAAWC,IAAQ0B,SAAxB,SACE,8BAAMD,MAER,cAAChB,EAAD,CAAqBG,SAZL,SAACgB,GACnBlC,EAAMmC,YAAYD,EAAOE,sBAGH,cAAC,IAAD,CAAUnC,GAAI,Y,yBCFzBoC,sBACXlC,aAZkB,SAACV,GACrB,MAAO,CAAEkC,YAAalC,EAAMkC,gBAEL,SAACW,GACxB,MAAO,CACLH,YAAa,SAACC,GACZE,EAASC,YAAsBH,SAOjCxC,IAFWyC,CAIdX","file":"static/js/4.4183ae8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Fqxj\",\"dialogs_item\":\"Dialogs_dialogs_item__1Re4_\",\"active\":\"Dialogs_active__XOQ_S\",\"dialog\":\"Dialogs_dialog__3E-P2\",\"massages\":\"Dialogs_massages__2bAiN\",\"massage\":\"Dialogs_massage__30H5q\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={classes.dialogs_item + \" \" + classes.active}>\r\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\nconst Massage = (props) => {\r\n  return <div className={classes.massage}>{props.massage}</div>;\r\n};\r\n\r\nexport default Massage;\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Massage from \"./Massage/Massage\";\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsPage = props.dialogsPage;\r\n  let dialogs = dialogsPage.dialogs.map((d) => (\r\n    <DialogItem name={d.name} id={d.id} />\r\n  ));\r\n  let massagesElements = dialogsPage.massages.map((m) => (\r\n    <Massage massage={m.massage} />\r\n  ));\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  if(!props.isAuth)return <Redirect to={'/login'}/>;\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogs_item}>{dialogs}</div>\r\n      <div className={classes.massages}>\r\n        <div>{massagesElements}</div>\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n  );\r\n};\r\nconst maxLengthCreator50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props) =>{\r\n  return(\r\n      <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <div>\r\n            <Field component={Textarea} name={\"newMessageBody\"} placeholder=\"Enter your message\"\r\n            validate={[required, maxLengthCreator50]}/>\r\n\r\n          </div>\r\n          <div>\r\n            <button>Send</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Dialogs from \".//Dialogs\";\r\nimport {\r\n  addSendMessageCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return { dialogsPage: state.dialogsPage};\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(addSendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(Dialogs);\r\n"],"sourceRoot":""}